midlines_all = midlines_draw(buffer_pol_union, max_dist = max_distance_between_pts, near_buffer_dist = near_buffer_distance)
plot(buffer_pol_union)
plot(midlines_all$geometry, add = TRUE, col = midlines_all$line_id)
bbox_as_line = st_cast(st_as_sfc(bbox),"LINESTRING")
live_deadends = deadends(midlines_all, n_removed = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
deadend_lines = live_deadends[[1]]
liveend_lines = live_deadends[[2]]
midlines_all = midlines_draw(buffer_pol_union, max_dist = max_distance_between_pts, near_buffer_dist = near_buffer_distance)
plot(buffer_pol_union)
plot(midlines_all$geometry, add = TRUE, col = midlines_all$line_id)
live_deadends = deadends(midlines_all, n_removed = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
deadend_lines = live_deadends[[1]]
liveend_lines = live_deadends[[2]]
plot(liveend_lines$geometry)
plot(deadend_lines$geometry, col = "red", add = TRUE)
dat = midlines_all
n_removed=10
boarder_line = bbox_as_line
boarder_distance = set_units(1,"m")
i=1
if(!(is.null(boarder_line))) {
dat$boarder_intersect = as.vector(
sf::st_is_within_distance(boarder_line, dat$geometry, dist=boarder_distance, sparse=FALSE))
}
mid_points = sf::st_cast(dat,"POINT")
mid_points$point_id = 1:nrow(mid_points)
removed_mid_points <- data.frame(matrix(ncol = 10, nrow = 0))
for(i in 1:n_removed) {
if (i == 1) trimmed_mid_points = mid_points
trimmed_mid_points$dead_point = lengths(sf::st_intersects(trimmed_mid_points))==1
#table(trimmed_mid_points$dead_point)
if(!(is.null(boarder_line))) {
trimmed_mid_points$dead_point[trimmed_mid_points$boarder_intersect==TRUE] = FALSE
}
ls =trimmed_mid_points$line_id[trimmed_mid_points$dead_point]
trimmed_mid_points$dead_line = trimmed_mid_points$line_id %in% ls
trimmed_mid_points$cycle = i
new_removed_mid_points =trimmed_mid_points[trimmed_mid_points$dead_line == TRUE,]
removed_mid_points = rbind(removed_mid_points, new_removed_mid_points)
new_removed_mid_points =trimmed_mid_points[trimmed_mid_points$dead_line == FALSE,]
}#for loop
dat = midlines_all
n_removed=10
boarder_line = bbox_as_line
boarder_distance = set_units(1,"m")
i=1
if(!(is.null(boarder_line))) {
dat$boarder_intersect = as.vector(
sf::st_is_within_distance(boarder_line, dat$geometry, dist=boarder_distance, sparse=FALSE))
}
mid_points = sf::st_cast(dat,"POINT")
mid_points$point_id = 1:nrow(mid_points)
removed_mid_points <- data.frame(matrix(ncol = 10, nrow = 0))
for(i in 1:n_removed) {
if (i == 1) trimmed_mid_points = mid_points
trimmed_mid_points$dead_point = lengths(sf::st_intersects(trimmed_mid_points))==1
#table(trimmed_mid_points$dead_point)
if(!(is.null(boarder_line))) {
trimmed_mid_points$dead_point[trimmed_mid_points$boarder_intersect==TRUE] = FALSE
}
ls =trimmed_mid_points$line_id[trimmed_mid_points$dead_point]
trimmed_mid_points$dead_line = trimmed_mid_points$line_id %in% ls
trimmed_mid_points$cycle = i
new_removed_mid_points =trimmed_mid_points[trimmed_mid_points$dead_line == TRUE,]
removed_mid_points = rbind(removed_mid_points, new_removed_mid_points)
trimmed_mid_points =trimmed_mid_points[trimmed_mid_points$dead_line == FALSE,]
}#for loop
View(removed_mid_points)
removed_lines = removed_mid_points %>%
dplyr::group_by(line_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("LINESTRING")
trimmed_lines = trimmed_mid_points %>%
dplyr::group_by(line_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("LINESTRING")
load_all()
midlines_all = midlines_draw(buffer_pol_union, max_dist = max_distance_between_pts, near_buffer_dist = near_buffer_distance)
plot(buffer_pol_union)
plot(midlines_all$geometry, add = TRUE, col = midlines_all$line_id)
bbox_as_line = st_cast(st_as_sfc(bbox),"LINESTRING")
live_deadends = deadends(midlines_all, n_removed = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
deadend_lines = live_deadends[[1]]
liveend_lines = live_deadends[[2]]
plot(liveend_lines$geometry)
plot(deadend_lines$geometry, col = "red", add = TRUE)
processed_lines = process_lines(live_deadends, length = set_units(20,"m"), n_lines = 10, tolerance = set_units(1,"m"))
cleaned_lines = processed_lines$cleaned_lines
removed_multilines = processed_lines$removed_multilines
plot(midlines_all$geometry)
plot(deadend_lines$geometry, add = TRUE, col="red", lwd=3)
plot(midlines_all$geometry)
plot(deadend_lines$geometry, add = TRUE, col="red", lwd=3)
plot(cleaned_lines$geometry[cleaned_lines$added_flag==1], add = TRUE, col="green", lwd=3)
load_all()
check()
dat = midlines_all
n_removed=10
boarder_line = bbox_as_line
boarder_distance = set_units(1,"m")
i=1
deadends = function(dat, n_removed=10, boarder_line = NULL, boarder_distance = units::set_units(1,"m")){
if(!(is.null(boarder_line))) {
dat$boarder_intersect = as.vector(
sf::st_is_within_distance(boarder_line, dat$geometry, dist=boarder_distance, sparse=FALSE))
}
mid_points = sf::st_cast(dat,"POINT")
mid_points$point_id = 1:nrow(mid_points)
removed_mid_points <- data.frame(matrix(ncol = 10, nrow = 0))
for(i in 1:n_removed) {
if (i == 1) trimmed_mid_points = mid_points
trimmed_mid_points$dead_point = lengths(sf::st_intersects(trimmed_mid_points))==1
#table(trimmed_mid_points$dead_point)
if(!(is.null(boarder_line))) {
trimmed_mid_points$dead_point[trimmed_mid_points$boarder_intersect==TRUE] = FALSE
}
ls =trimmed_mid_points$line_id[trimmed_mid_points$dead_point]
trimmed_mid_points$dead_line = trimmed_mid_points$line_id %in% ls
trimmed_mid_points$cycle = i
new_removed_mid_points =trimmed_mid_points[trimmed_mid_points$dead_line == TRUE,]
removed_mid_points = rbind(removed_mid_points, new_removed_mid_points)
trimmed_mid_points =trimmed_mid_points[trimmed_mid_points$dead_line == FALSE,]
}#for loop
dat = midlines_all
n_removed=10
boarder_line = bbox_as_line
boarder_distance = set_units(1,"m")
i=1
if(!(is.null(boarder_line))) {
dat$boarder_intersect = as.vector(
sf::st_is_within_distance(boarder_line, dat$geometry, dist=boarder_distance, sparse=FALSE))
}
mid_points = sf::st_cast(dat,"POINT")
mid_points$point_id = 1:nrow(mid_points)
removed_mid_points <- data.frame(matrix(ncol = 10, nrow = 0))
for(i in 1:n_removed) {
if (i == 1) trimmed_mid_points = mid_points
trimmed_mid_points$dead_point = lengths(sf::st_intersects(trimmed_mid_points))==1
#table(trimmed_mid_points$dead_point)
if(!(is.null(boarder_line))) {
trimmed_mid_points$dead_point[trimmed_mid_points$boarder_intersect==TRUE] = FALSE
}
ls =trimmed_mid_points$line_id[trimmed_mid_points$dead_point]
trimmed_mid_points$dead_line = trimmed_mid_points$line_id %in% ls
trimmed_mid_points$cycle = i
new_removed_mid_points =trimmed_mid_points[trimmed_mid_points$dead_line == TRUE,]
removed_mid_points = rbind(removed_mid_points, new_removed_mid_points)
trimmed_mid_points =trimmed_mid_points[trimmed_mid_points$dead_line == FALSE,]
}#for loop
removed_lines = removed_mid_points %>%
dplyr::group_by(line_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("LINESTRING")
View(removed_multilines)
View(removed_mid_points)
View(removed_lines)
View(removed_mid_points)
removed_lines2 = removed_mid_points %>%
dplyr::group_by(removed_mid_points$line_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("LINESTRING")
all_equal(removed_lines,removed_lines2)
View(removed_lines)
View(removed_lines2)
View(removed_lines)
View(removed_lines2)
View(removed_lines)
View(removed_lines2)
colnames(removed_lines2) = "line_id"
View(removed_lines2)
colnames(removed_lines2) = c("line_id", "geometry")
View(removed_lines2)
removed_lines2 = removed_mid_points %>%
dplyr::group_by(removed_mid_points$line_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("LINESTRING")
View(removed_lines2)
removed_lines2
removed_lines2 = removed_mid_points %>%
dplyr::group_by(removed_mid_points$line_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("LINESTRING")
removed_lines2
load_all()
check()
load_all()
check()
x = midlines_all
lines = x
lines$group_id = NA
#setorder(lines, group_id, line_id)
lines$n_ = 1:nrow(lines)
inter = sf::st_intersects(lines$geometry, lines$geometry)
group_index = 1
for(l in 1:nrow(lines)) {
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
}
View(lines)
multilines = lines %>%
dplyr::group_by(group_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
multilines2 = lines %>%
dplyr::group_by(lines$group_id) %>%
dplyr::summarise(do_union = FALSE) %>%
sf::st_cast("MULTILINESTRING")
View(multilines2)
View(multilines)
load_all()
check()
View(osm_nantes_metro_poly)
lines = x
lines$group_id = NA
#setorder(lines, group_id, line_id)
lines$n_ = 1:nrow(lines)
inter = sf::st_intersects(lines$geometry, lines$geometry)
group_index = 1
l=1
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
View(lines)
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
View(lines)
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
View(lines)
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
View(lines)
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
View(lines)
lines$group_id[lines$n_ %in%
inter[[lines$n_[l]]]] = group_index
data.table::setorder(lines, group_id, na.last = TRUE)
if(anyNA(lines$group_id[l+1])) group_index = group_index +1
#print(group_index)
l = l+1
View(lines)
View(liveend_lines)
View(mid_points)
View(multilines)
View(osm_cycle_infra)
View(removed_lines)
View(trimmed_mid_points)
View(trimmed_lines)
View(trimmed_lines)
View(removed_lines2)
View(new_removed_mid_points)
View(new_removed_mid_points)
View(midlines_all)
midlines_all[order(midlines_all$line_id, na.last = TRUE),]
midlines_all = midlines_all[order(midlines_all$line_id, na.last = TRUE),]
lines = lines[order(lines$group_id, na.last = TRUE),]
load_all()
check()
load_all()
check()
add_back_groups3 = ""
x_multilines = group_lines(x[[1]])
add_back_groups1 = x_multilines$group_id[x_multilines$n_lines >= n_lines]
#those greater than 20m
add_back_groups2 = x_multilines$group_id[x_multilines$length>length]
n_lines  = 10
add_back_groups1 = x_multilines$group_id[x_multilines$n_lines >= n_lines]
#those greater than 20m
add_back_groups2 = x_multilines$group_id[x_multilines$length>length]
length = set_units(30,"m")
add_back_groups1 = x_multilines$group_id[x_multilines$n_lines >= n_lines]
#those greater than 20m
add_back_groups2 = x_multilines$group_id[x_multilines$length>length]
add_back_groups = unique(c(add_back_groups1, add_back_groups2, add_back_groups3))
add_back_groups3 = NULL
add_back_groups = unique(c(add_back_groups1, add_back_groups2, add_back_groups3))
load_all()
check()
load_all()
check()
use_mit_license()
load_all()
check()
install()
usethis::use_build_ignore("midline_master_2021-09-18_to go with package")
load_all()
load_all()
load_all()
load_all()
library(devtools)
load_all()
check()
install()
library(devtools)
load_all()
devtools::check()
devtools::check()
library(sf)
library(maptiles)
library(units)
#library(tidyverse)
library(dplyr)
library(smoothr)
library(data.table)
library(lwgeom)
library(nngeo)
library(zoo)
# pkgs = c('sf',
# 'maptiles',
# 'units',
# 'dplyr',
# 'smoothr',
# 'data.table',
# 'lwgeom',
# 'nngeo',
# 'zoo')
#
# library('groundhog')
# #set.groundhog.folder("C:/Users/richa/OneDrive - University of Cambridge/other/groundhog")
# groundhog.library(pkgs, "2021-10-29", tolerate.R.version = '4.0.3')
# Part 1 get the data
# Road in the OSM cycle infrastrucutre data.
#   downloaded and prepared in OSMextract.R
osm_cycle_infra = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/osm_cycle_infra.gpkg")
osm_nantes_ways = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/osm_nantes_ways.gpkg")
osm_nantes_metro_poly = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/osm_nantes_metro_poly.gpkg")
colnames(osm_cycle_infra)[colnames(osm_cycle_infra) == "geom"] = "geometry"
st_geometry(osm_cycle_infra) <- "geometry"
colnames(osm_nantes_ways)[colnames(osm_nantes_ways) == "geom"] = "geometry"
st_geometry(osm_nantes_ways) <- "geometry"
la_nantes = read_sf("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/raw/local_authority/244400404_amenagements-cyclables-nantes-metropole.geojson")
la_nantes
#data_sf_kml = read_sf("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/244400404_amenagements-cyclables-nantes-metropole.kml")
#data_sf_shapefile = read_sf("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/shapefile/244400404_amenagements-cyclables-nantes-metropole.shp")
#data_sf_csv = read_sf("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/244400404_amenagements-cyclables-nantes-metropole.csv")
#transform to british national grid. probably a better option for france
la_nantes = st_transform(la_nantes, "EPSG:27700")
osm_cycle_infra = st_transform(osm_cycle_infra, "EPSG:27700")
osm_nantes_metro_poly = st_transform(osm_nantes_metro_poly, "EPSG:27700")
osm_nantes_ways = st_transform(osm_nantes_ways, "EPSG:27700")
la_nantes = st_union(la_nantes, by_feature = TRUE) # this removed lists of linstrings into one
la_nantes = la_nantes %>% select(-geo_point_2d)
la_nantes$commune = as.factor(la_nantes$commune)
la_nantes$nom = as.factor(la_nantes$nom)
la_nantes$utilisation = as.factor(la_nantes$utilisation)
la_nantes$sens = as.factor(la_nantes$sens)
la_nantes$type = as.factor(la_nantes$type)
la_nantes
#plot(la_nantes)
plot(la_nantes$geometry, col = la_nantes$commune)
#nantes_bbox = sf::st_bbox(la_nantes) # this is likely to be needed for the OSMextracts stuff to crop the dataset.
#plot(nantes_bbox, add = TRUE)
#names(data_sf_csv) = c("name", "description", "something", "id", "nom",  "type", "type2", "commune", "utilisation", "one", "two", "three", "geometry")
la_nantes$geometry[1]
la_nantes$geometry[[1]]
#plot them both together
plot(osm_cycle_infra$geometry)
plot(la_nantes$geometry, col="red", add=TRUE)
#not really sure how to compare so going to zoom in and look at smaller areas
#nb st_difference takes ages on these large datasets anyway.
#create the bboxes first so it cropped at the bbox and not the administrative area
#could probably use st_crop here and save a step
st_herblain_bbox = sf::st_bbox(la_nantes %>% filter(commune=="ST-HERBLAIN"))
CdG_bbox = sf::st_bbox(la_nantes %>% filter(commune=="ST-HERBLAIN" & nom=="Boulevard Charles De Gaulle")) # this is likely to be needed for the OSMextracts stuff to crop the dataset.
#create for the communte of St Herblain
la_st_herblain = la_nantes %>% st_intersection(st_as_sfc(st_herblain_bbox))
osm_st_herblain = osm_cycle_infra %>% st_intersection(st_as_sfc(st_herblain_bbox))
#create for the arbitary small area around the bit of Blvd Carles de Gaulle in St-Herb
la_CdG = la_nantes %>% st_intersection(st_as_sfc(CdG_bbox))
osm_CdG = osm_cycle_infra %>% st_intersection(st_as_sfc(CdG_bbox))
#plot(la_st_herblain$geometry)
plot(la_st_herblain$geometry, col = la_st_herblain$nom)
plot(osm_CdG$geometry, lwd = 3)
plot(la_CdG$geometry, add = TRUE, col = "red")
CdG_tile <- get_tiles(x = la_CdG, crop=TRUE)
plot_tiles(CdG_tile)
plot(osm_CdG$geometry, add = TRUE, lwd = 3)
plot(la_CdG$geometry, add = TRUE, col = "red")
rm(st_herblain_bbox, osm_st_herblain, la_st_herblain, CdG_tile, osm_nantes_ways, CdG_bbox, la_CdG, osm_CdG)
# Part 2 create midlines.
#run the function script
#source("r/midline_functions_2021-10-15.R")
#source("r/group_midlines_2021-10-30.R") # this can probably be incorporated once i'm sure all is well
#source("r/de_densify.R") # this can probably be incorporated once i'm sure all is well
#source("r/starting_smooth.R") # this can probably be incorporated once i'm sure all is well
#source("r/midlines_draw_new.R")
library(devtools)
load_all()
#Boulevard Charles De Gaulle
bbox = sf::st_bbox(la_nantes %>% filter(commune=="ST-HERBLAIN"))
#bbox = sf::st_bbox(la_nantes %>% filter(commune=="ST-HERBLAIN" & nom=="Boulevard Charles De Gaulle")) # this is likely to be needed for the OSMextracts stuff to crop the dataset.
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Rue Camille Claudel"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard Jules Verne"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard des Anglais"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard Charles De Gaulle"))
# maybe something like this to more adequate assess the whole area.
# a = st_make_grid(bbox, n = c(5,5))
# st_bbox(a[[1]])
#cycle lane data for the bbox area
la_dat = la_nantes %>% st_intersection(st_as_sfc(bbox))
osm_dat = osm_cycle_infra %>% st_intersection(st_as_sfc(bbox))
plot(la_dat$geometry)
buffer_width = 7.5                # units don't work with square end style not sure why. it was okay for round ends?
max_distance_between_pts = 10     # ensure sufficient points on buffer to allow Voronoi
near_lanes_distance = set_units(7.5, metres)
near_buffer_distance = set_units(5, metres)  # to exclude, higher
#merge cycle lane data
dat_both = rbind(osm_dat[,"geometry"],la_dat[,"geometry"])
buffer_pol_union = st_union(st_buffer(dat_both, buffer_width, endCapStyle = "SQUARE", joinStyle = "BEVEL" )) # buffer width defined above (with units)
plot(dat_both$geometry)
plot(buffer_pol_union, add = TRUE)
plot(buffer_pol_union)
buffer_pol_union = st_remove_holes(buffer_pol_union, max_area = 250)
plot(buffer_pol_union)
midlines_all = midlines_draw(buffer_pol_union, max_dist = max_distance_between_pts, near_buffer_dist = near_buffer_distance)
midlines_all = midlines_draw(buffer_pol_union, max_dist = max_distance_between_pts, near_buffer_dist = near_buffer_distance)
plot(buffer_pol_union)
plot(midlines_all$geometry, add = TRUE, col = midlines_all$line_id)
bbox_as_line = st_cast(st_as_sfc(bbox),"LINESTRING")
live_deadends = deadends(midlines_all, n_removed = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
deadend_lines = live_deadends[[1]]
liveend_lines = live_deadends[[2]]
plot(liveend_lines$geometry)
plot(deadend_lines$geometry, col = "red", add = TRUE)
processed_lines = process_lines(live_deadends, length = set_units(20,"m"), n_lines = 10, tolerance = set_units(1,"m"))
load_all()
processed_lines = process_lines(live_deadends, length = set_units(20,"m"), n_lines = 10, tolerance = set_units(1,"m"))
load_all()
processed_lines = process_lines(live_deadends, length = set_units(20,"m"), n_lines = 10, boarder_lines = bbox_as_line, tolerance = set_units(1,"m"))
processed_lines = process_lines(live_deadends, length = set_units(20,"m"), n_lines = 10, boarder_line = bbox_as_line, tolerance = set_units(1,"m"))
load_all()
processed_lines = process_lines(live_deadends, length = set_units(20,"m"), n_lines = 10, boarder_line = bbox_as_line, tolerance = set_units(1,"m"))
load_all()
processed_lines = process_lines(live_deadends, length = set_units(20,"m"), n_lines = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
cleaned_lines = processed_lines$cleaned_lines
removed_multilines = processed_lines$removed_multilines
plot(midlines_all$geometry)
plot(deadend_lines$geometry, add = TRUE, col="red", lwd=3)
plot(midlines_all$geometry)
plot(deadend_lines$geometry, add = TRUE, col="red", lwd=3)
plot(cleaned_lines$geometry[cleaned_lines$added_flag==1], add = TRUE, col="green", lwd=3)
midlines_all = midlines_draw(buffer_pol_union, max_dist = max_distance_between_pts, near_buffer_dist = near_buffer_distance)
live_deadends = deadends(midlines_all, n_removed = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
processed_lines = process_lines(live_deadends, length = set_units(20,"m"), n_lines = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
processed_lines = process_lines(live_deadends, length = set_units(20,"m"), n_lines = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
View(processed_lines)
