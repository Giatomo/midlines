de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo))), crs = sf::st_crs(x)),"LINESTRING")
colnames(de_densified)[colnames(de_densified) == colnames(de_densified)] = "geometry" #this only works cos there is one column
sf::st_geometry(de_densified) <- "geometry"
de_densified$line_id = 1:nrow(de_densified)
st_crs(x)
st_crs(x) == NA
st_crs(x) == "Coordinate Reference System: NA"
is.na(st_crs(x))
!(is.na(st_crs(x)))
if !(is.na(st_crs(x))) st_crs(de_densified) = st_crs(x)
!is.na(st_crs(x)) st_crs(de_densified) = st_crs(x)
!(is.na(st_crs(x))) st_crs(de_densified) = st_crs(x)
!(is.na(st_crs(x))){ st_crs(de_densified) = st_crs(x) }
if{ !(is.na(st_crs(x))) st_crs(de_densified) = st_crs(x)}
!(is.na(st_crs(x)))
if (!(is.na(st_crs(x)))) {st_crs(de_densified) = st_crs(x)}
load_all()
poly = st_buffer(st_linestring(matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE) ),0.75)
plot(poly, col = "GRAY")
ml = midlines_clean(midlines_draw(poly, dfMaxLength = 1))
ml = ml[ml$removed_flag==0,]
plot(ml$geometry, add = TRUE)
ml_dedensified = midlines_dedensify(ml, density = 1)
x = ml
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo)))),"LINESTRING")
apply(de_densified,1,combo)
sf::st_as_sfc((apply(de_densified,1,combo)))
smoothed_lines = midlines_smooth(debit_lines)
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard Charles De Gaulle"))
bbox_as_line = st_cast(st_as_sfc(bbox),"LINESTRING")
#bbox_as_poly = st_sfc(st_polygon(bbox_as_line),crs = st_crs(bbox_as_line))
# maybe something like this to more adequate assess the whole area.
# a = st_make_grid(bbox, n = c(5,5))
# st_bbox(a[[1]])
#cycle lane data for the bbox area
la_dat = la_nantes %>% st_intersection(st_as_sfc(bbox))
osm_dat = osm_cycle_infra %>% st_intersection(st_as_sfc(bbox))
plot(la_dat$geometry)
buffer_width = 7.5                # units don't work with square end style not sure why. it was okay for round ends?
#merge cycle lane data
dat_both = rbind(osm_dat[,"geometry"],la_dat[,"geometry"])
buffer_pol_union = st_union(st_buffer(dat_both, buffer_width, endCapStyle = "SQUARE", joinStyle = "BEVEL" )) # buffer width defined above (with units)
plot(dat_both$geometry)
plot(buffer_pol_union, add = TRUE)
plot(buffer_pol_union)
buffer_pol_union = st_remove_holes(buffer_pol_union, max_area = 250)
plot(buffer_pol_union)
midlines_all = midlines_draw(buffer_pol_union, dfMaxLength = 10, border_line = bbox_as_line)
plot(buffer_pol_union)
plot(midlines_all$geometry, add = TRUE, col = midlines_all$line_id)
live_deadends = midlines_clean(midlines_all, n_removed = 10, border_line = bbox_as_line)
#deadend_lines2 = live_deadends2[live_deadends2$removed_flag==1,]
#liveend_lines2 = live_deadends2[live_deadends2$removed_flag==0,]
#plot(liveend_lines$geometry)
#plot(deadend_lines$geometry, col = "red", add = TRUE)
plot(live_deadends$geometry[live_deadends$removed_flag==0])
plot(live_deadends$geometry[live_deadends$removed_flag==1], col = "red", add = TRUE)
processed_lines = midlines_check(live_deadends, length = set_units(30,"m"), n_removed = 10, border_line = bbox_as_line)
#cleaned_lines = processed_lines$cleaned_lines
#removed_multilines = processed_lines$removed_multilines
#cleaned_lines = processed_lines[processed_lines$removed_flag2==0,]
#removed_multilines = processed_lines[processed_lines$removed_flag2==1,] # these are not multilines now
plot(processed_lines$geometry)
plot(processed_lines$geometry[processed_lines$removed_flag==1], add = TRUE, col="red", lwd=3)
plot(processed_lines$geometry)
plot(processed_lines$geometry[processed_lines$removed_flag==1], add = TRUE, col="red", lwd=3)
plot(processed_lines$geometry[processed_lines$added_flag==1], add = TRUE, col="green", lwd=3)
cleaned_lines = processed_lines %>%
filter(removed_flag2 == 0) %>%
select(line_id, geometry)
#group the lines so that small bits especially on the margins can be excluded.
debit_lines = midlines_debit(cleaned_lines, set_units(20,"m"))
smoothed_lines = midlines_smooth(debit_lines)
x = smoothed_lines
density = set_units(20,"m")
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo)))),"LINESTRING")
apply(de_densified,1,combo)
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
apply(de_densified,1,combo)
g = st_polygon(
st_difference(
(st_buffer(st_point(c(5,5)), 3)),
(st_buffer(st_point(c(5,5)), 2)) ) )
plot(g, col = "red")
j = midlines_draw(g)
plot(j, add = TRUE)
k = deadends(j)
plot(k$geometry, col = k$removed_flag, add = TRUE)
l = process_lines(k, n_lines = 5, length = 10)
plot(l$geometry, col = l$removed_flag2, add = TRUE)
g = st_polygon(
st_difference(
(st_buffer(st_point(c(5,5)), 3)),
(st_buffer(st_point(c(5,5)), 2)) ) )
plot(g, col = "red")
outer = matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE)
hole1 = matrix(c(2,2,2,8,8,8,8,2,2,2),ncol=2, byrow=TRUE)
#hole2 = matrix(c(5,5,5,6,6,6,6,5,5,5),ncol=2, byrow=TRUE)
pts = list(outer, hole1)
(pl1 = st_polygon(pts))
plot(pl1, col = "red")
p5_2 = st_buffer(st_point(c(5,10)),1)
p1 = st_buffer(st_linestring(matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE) ),0.75)
p2 = st_buffer(st_linestring(matrix(c(5,5,20,5,20,20,5,20,5,5),ncol=2, byrow=TRUE) ),0.75)
p3 = st_polygon( st_difference(
(st_buffer(st_point(c(6,13)), 11)),
(st_buffer(st_point(c(6,13)), 9)) ) )
p4 = st_buffer(st_point(c(4.5,20.5)),1.5)
p5 = st_polygon(list(matrix(c(4,9,4,11,6,11,6,9,4,9),ncol=2, byrow=TRUE)))
p6 = st_union(st_union(st_union(p1, p2), p3), p4)
p7 = st_difference(p6, p5)
plot(p7, col = "GRAY")
ml = midlines_draw(poly7, dfMaxLength = 1)
plot(ml$geometry, col = ml$line_id, add = TRUE)
ml_clean = midlines_clean(ml, n_removed = 10)
plot(ml_clean$geometry, col = ml_clean$removed_flag, add = TRUE)
ml_checked = midlines_check(ml_clean, n_removed = 10)
plot(ml_checked$geometry, col=ml_checked$removed_flag2,add = TRUE)
ml = ml_checked[ml_checked$removed_flag2==0,]
plot(poly7, col = "GRAY")
plot(ml$geometry, add = TRUE)
ml_clean = midlines_clean(ml, n_removed = 2)
plot(ml_clean$geometry, col = ml_clean$removed_flag, add = TRUE)
ml_checked = midlines_check(ml_clean, n_removed = 2)
plot(ml_checked$geometry, col=ml_checked$removed_flag2,add = TRUE)
ml = ml_checked[ml_checked$removed_flag2==0,]
plot(poly7, col = "GRAY")
plot(ml_checked$geometry, add = TRUE)
ml_clean = midlines_clean(ml, n_removed = 1)
plot(ml_clean$geometry, col = ml_clean$removed_flag, add = TRUE)
ml_clean = ml_clean %>% filter(removed_flag == 0)
plot(poly7, col = "GRAY")
plot(ml_clean$geometry, add = TRUE)
p1 = st_buffer(st_linestring(matrix(c(0,0,30,0),ncol=2, byrow=TRUE) ),0.75)
plot(p1)
p2 = st_buffer(st_linestring(matrix(c(9,5,9,0,20,0,18,-4),ncol=2, byrow=TRUE) ),0.75)
plot(p2, add = TRUE)
p3 = st_union(p1, p2)
plot(p3, col = "GRAY")
p1 = st_buffer(st_linestring(matrix(c(0,0,30,0),ncol=2, byrow=TRUE) ),0.75)
plot(p1)
p2 = st_buffer(st_linestring(matrix(c(9,5,9,0,20,0,18,-4),ncol=2, byrow=TRUE) ),0.75)
plot(p2, add = TRUE)
p3 = st_union(p1, p2)
plot(p3, col = "GRAY")
ml = midlines_draw(p3, dfMaxLength = 1)
plot(ml$geometry, add = TRUE)
ml_clean = midlines_clean(ml, n_removed = 15)
plot(ml_clean$geometry, col = ml_clean$removed_flag, add = TRUE)
ml_check = midlines_check(ml_clean, n_removed = 10)
plot(p3, col = "GRAY")
plot(ml_check$geometry, col = ml_check$removed_flag2, add = TRUE)
ml_check2 = midlines_check(ml_clean, length = 5)
plot(p3, col = "GRAY")
plot(ml_check2$geometry, col = ml_check2$removed_flag2, add = TRUE)
p1 = st_buffer(st_linestring(matrix(c(0,0,30,0),ncol=2, byrow=TRUE) ),0.75)
plot(p1)
p2 = st_buffer(st_linestring(matrix(c(9,5,9,0,20,0,18,-4),ncol=2, byrow=TRUE) ),0.75)
plot(p2, add = TRUE)
p3 = st_union(p1, p2)
plot(p3, col = "GRAY")
load_all()
devtools::check()
load_all()
check()
library(devtools)
library(sf)
library(dplyr)
library(units)
library(nngeo)
load_all()
la_nantes = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/la_nantes.gpkg")
osm_cycle_infra = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/osm_cycle_infra.gpkg")
#osm_nantes_metro_poly = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/osm_nantes_metro_poly.gpkg")
#annoyingly st_read names the geometry column and geom and the code won't like that
colnames(la_nantes)[colnames(la_nantes) == "geom"] = "geometry"
st_geometry(la_nantes) <- "geometry"
colnames(osm_cycle_infra)[colnames(osm_cycle_infra) == "geom"] = "geometry"
st_geometry(osm_cycle_infra) <- "geometry"
#colnames(osm_nantes_metro_poly)[colnames(osm_nantes_metro_poly) == "geom"] = "geometry"
#st_geometry(osm_nantes_metro_poly) <- "geometry"
#Boulevard Charles De Gaulle
bbox = sf::st_bbox(la_nantes %>% filter(commune=="ST-HERBLAIN"))
#bbox = sf::st_bbox(la_nantes %>% filter(commune=="ST-HERBLAIN" & nom=="Boulevard Charles De Gaulle")) # this is likely to be needed for the OSMextracts stuff to crop the dataset.
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Rue Camille Claudel"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard Jules Verne"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard des Anglais"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard Charles De Gaulle"))
bbox_as_line = st_cast(st_as_sfc(bbox),"LINESTRING")
#bbox_as_poly = st_sfc(st_polygon(bbox_as_line),crs = st_crs(bbox_as_line))
# maybe something like this to more adequate assess the whole area.
# a = st_make_grid(bbox, n = c(5,5))
# st_bbox(a[[1]])
#cycle lane data for the bbox area
la_dat = la_nantes %>% st_intersection(st_as_sfc(bbox))
osm_dat = osm_cycle_infra %>% st_intersection(st_as_sfc(bbox))
plot(la_dat$geometry)
buffer_width = 7.5                # units don't work with square end style not sure why. it was okay for round ends?
#merge cycle lane data
dat_both = rbind(osm_dat[,"geometry"],la_dat[,"geometry"])
buffer_pol_union = st_union(st_buffer(dat_both, buffer_width, endCapStyle = "SQUARE", joinStyle = "BEVEL" )) # buffer width defined above (with units)
plot(dat_both$geometry)
plot(buffer_pol_union, add = TRUE)
plot(buffer_pol_union)
buffer_pol_union = st_remove_holes(buffer_pol_union, max_area = 250)
plot(buffer_pol_union)
midlines_all = midlines_draw(buffer_pol_union, dfMaxLength = 10, border_line = bbox_as_line)
plot(buffer_pol_union)
plot(midlines_all$geometry, add = TRUE, col = midlines_all$line_id)
live_deadends = midlines_clean(midlines_all, n_removed = 10, border_line = bbox_as_line)
#deadend_lines2 = live_deadends2[live_deadends2$removed_flag==1,]
#liveend_lines2 = live_deadends2[live_deadends2$removed_flag==0,]
#plot(liveend_lines$geometry)
#plot(deadend_lines$geometry, col = "red", add = TRUE)
plot(live_deadends$geometry[live_deadends$removed_flag==0])
plot(live_deadends$geometry[live_deadends$removed_flag==1], col = "red", add = TRUE)
processed_lines = midlines_check(live_deadends, length = set_units(30,"m"), n_removed = 10, border_line = bbox_as_line)
#cleaned_lines = processed_lines$cleaned_lines
#removed_multilines = processed_lines$removed_multilines
#cleaned_lines = processed_lines[processed_lines$removed_flag2==0,]
#removed_multilines = processed_lines[processed_lines$removed_flag2==1,] # these are not multilines now
plot(processed_lines$geometry)
plot(processed_lines$geometry[processed_lines$removed_flag==1], add = TRUE, col="red", lwd=3)
plot(processed_lines$geometry)
plot(processed_lines$geometry[processed_lines$removed_flag==1], add = TRUE, col="red", lwd=3)
plot(processed_lines$geometry[processed_lines$added_flag==1], add = TRUE, col="green", lwd=3)
cleaned_lines = processed_lines %>%
filter(removed_flag2 == 0) %>%
select(line_id, geometry)
#group the lines so that small bits especially on the margins can be excluded.
debit_lines = midlines_debit(cleaned_lines, set_units(20,"m"))
smoothed_lines = midlines_smooth(debit_lines)
de_densified = midlines_dedensify(smoothed_lines, density = set_units(20, "m"))
library(sf)
poly = st_buffer(st_linestring(matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE) ),0.75)
plot(poly, col = "GRAY")
ml = midlines_clean(midlines_draw(poly, dfMaxLength = 1))
ml = ml[ml$removed_flag==0,]
plot(ml$geometry, add = TRUE)
##need to fix this as it doesn't work but with the midline_master it does
ml_dedensified = midlines_dedensify(ml, density = 1)
View(ml)
View(smoothed_lines)
ml = ml %>% select(-removed_flag)
ml_dedensified = midlines_dedensify(ml, density = 1)
s = function(x){
l = length(dat$geometry[[x]])
a = zoo::rollapply(dat$geometry[[x]][1:(l/2)], width = width, mean )
b = zoo::rollapply(dat$geometry[[x]][(l/2+1):l], width = width, mean )
sx = dat$geometry[[x]][1]
ex = dat$geometry[[x]][(l/2)]
sy = dat$geometry[[x]][(l/2+1)]
ey = dat$geometry[[x]][l]
sf::st_linestring(cbind(c(sx,a,ex),c(sy,b,ey)))
}
x = smoothed_lines
dat = midlines_group(x)
dat = dat %>% dplyr::select(geometry)  # stop warning about repeating attributes
dat = sf::st_cast(dat,"LINESTRING")
nrow = nrow(dat)
smoothed = sf::st_as_sf(sf::st_as_sfc(lapply(1:nrow, s)))
width = 3
x = smoothed_lines
dat = midlines_group(x)
dat = dat %>% dplyr::select(geometry)  # stop warning about repeating attributes
dat = sf::st_cast(dat,"LINESTRING")
nrow = nrow(dat)
smoothed = sf::st_as_sf(sf::st_as_sfc(lapply(1:nrow, s)))
x = ml
dat = midlines_group(x)
dat = dat %>% dplyr::select(geometry)  # stop warning about repeating attributes
dat = sf::st_cast(dat,"LINESTRING")
View(dat)
nrow = nrow(dat)
smoothed = sf::st_as_sf(sf::st_as_sfc(lapply(1:nrow, s)))
smoothed = sf::st_as_sf(
sf::st_collection_extract(
lwgeom::st_split(smoothed$x,
sf::st_union(
sf::st_cast(smoothed, "MULTIPOINT"))), type = "LINESTRING"))
ml_dedensified = midlines_dedensify(ml, density = 1)
smoothed_lines = midlines_smooth(debit_lines)
poly = st_buffer(st_linestring(matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE) ),0.75)
plot(poly, col = "GRAY")
ml = midlines_clean(midlines_draw(poly, dfMaxLength = 1))
ml = ml[ml$removed_flag==0,]
plot(ml$geometry, add = TRUE)
##need to fix this as it doesn't work but with the midline_master it does
ml_dedensified = midlines_dedensify(ml, density = 1)
x = smoothed_lines
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
density = set_units(20, "m")
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo)))),"LINESTRING")
x = ml
density = 1
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo)))),"LINESTRING")
x = smoothed_lines
density = set_units(20, "m")
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
View(de_densified)
x = smoothed_lines
density = set_units(20, "m")
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
View(ls)
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
View(de_densified)
combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo)))),"LINESTRING")
View(de_densified)
x = ml
density = 1
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
View(de_densified)
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo)))),"LINESTRING")
View(de_densified)
seq_along(smoothed_lines)
seq_len(smoothed_lines)
apply(de_densified,1,combo)
nrow(de_densified)
nrow = nrow(de_densified)
apply(1:1, 1m combo)
lapply(1:1, 1m combo)
apply(1:1, 1, combo)
lapply(1:1, 1, combo)
lapply(1:1, combo)
seq_along(1)
combo2 = function(x){(sf::st_union(c(de_densified$s[[x]],de_densified$x[[x]],de_densified$e[[x]])))}
lapply(1:1, combo2)
View(de_densified)
x = ml
density = 1
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
View(de_densified)
c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]])
st_combine(c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]]))
st_cast(c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]]),"LINESTRING"
st_cast(c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]]),"LINESTRING")
combo2 = function(x){(sf:st_cast(c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]]),"LINESTRING"))
combo2 = function(x){(sf:st_cast(c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]]),"LINESTRING"))
combo2 = function(x){(sf:st_cast(c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]]),"LINESTRING")}
combo2 = function(x){(sf:st_cast(c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]]),"LINESTRING"))}
x = smoothed_lines
density = set_units(20, "m")
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
nrow = nrow(de_densified)
lapply(1:nrow, combo2)
library(sf)
combo2 = function(x){(sf::st_cast(c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]]),"LINESTRING"))}
lapply(1:nrow, combo2)
c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]])
sf::st_cast(c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]]),"LINESTRING")
combo2 = function(x){(sf::st_cast(c(de_densified$s[[x]],de_densified$x[[x]],de_densified$e[[x]]),"LINESTRING"))}
lapply(1:nrow, combo2)
c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]])
sf::st_cast(c(de_densified$s[[1]],de_densified$x[[1]],de_densified$e[[1]]),"LINESTRING")
View(de_densified)
density = 3
# 1
x = smoothed_lines
density = set_units(20, "m")
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
View(de_densified)
lapply(1:nrow, combo2)
h = lapply(1:nrow, combo2)
st_as_sfc(h)
st_sf(st_as_sfc(h))
st_sf(st_as_sfc(lapply(1:nrow, combo2)))
x = smoothed_lines
density = set_units(20, "m")
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
#combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
#de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo)))),"LINESTRING")
combo2 = function(x){(sf::st_cast(c(de_densified$s[[x]],de_densified$x[[x]],de_densified$e[[x]]),"LINESTRING"))}
de_densified = st_sf(st_as_sfc(lapply(1:nrow, combo2)))
View(de_densified)
x = ml
density = 1
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
#combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
#de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo)))),"LINESTRING")
combo2 = function(x){(sf::st_cast(c(de_densified$s[[x]],de_densified$x[[x]],de_densified$e[[x]]),"LINESTRING"))}
de_densified = st_sf(st_as_sfc(lapply(1:nrow, combo2)))
x = smoothed_lines
density = set_units(20, "m")
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
#combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
#de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo)))),"LINESTRING")
nrow = nrow(de_densified)
combo2 = function(x){(sf::st_cast(c(de_densified$s[[x]],de_densified$x[[x]],de_densified$e[[x]]),"LINESTRING"))}
de_densified = st_sf(st_as_sfc(lapply(1:nrow, combo2)))
View(de_densified)
x = ml
density = 1
x = midlines_group(x)
x = x %>% dplyr::select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
#combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
#de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo)))),"LINESTRING")
nrow = nrow(de_densified)
combo2 = function(x){(sf::st_cast(c(de_densified$s[[x]],de_densified$x[[x]],de_densified$e[[x]]),"LINESTRING"))}
de_densified = st_sf(st_as_sfc(lapply(1:nrow, combo2)))
View(de_densified)
1:0
1:seq_along(1)
seq_len(de_densified)
load_all()
poly = st_buffer(st_linestring(matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE) ),0.75)
plot(poly, col = "GRAY")
ml = midlines_clean(midlines_draw(poly, dfMaxLength = 1))
ml = ml[ml$removed_flag==0,]
plot(ml$geometry, add = TRUE)
##need to fix this as it doesn't work but with the midline_master it does
ml_dedensified = midlines_dedensify(ml, density = 1)
plot(poly, col = "GRAY")
plot(ml_dedensified$geometry, add = TRUE)
