cleaned_lines = processed_lines[processed_lines$removed_flag2==0,]
removed_multilines = processed_lines[processed_lines$removed_flag2==1,] # these are not multilines now
plot(processed_lines$geometry)
plot(processed_lines$geometry[processed_lines$removed_flag==1], add = TRUE, col="red", lwd=3)
plot(processed_lines$geometry)
plot(processed_lines$geometry[processed_lines$removed_flag==1], add = TRUE, col="red", lwd=3)
plot(processed_lines$geometry[processed_lines$added_flag==1], add = TRUE, col="green", lwd=3)
processed_lines = process_lines(live_deadends, length = set_units(30,"m"), n_lines = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
cleaned_lines = processed_lines %>%
filter(removed_flag2 == 0) %>%
select(line_id, geometry)
debit_lines = midlines_debit(cleaned_lines, set_units(20,"m"))
x = cleaned_lines
merged_lines = group_lines(x)
merged_lines = merged_lines[merged_lines$length > length, ]
sf::st_covers(merged_lines, cleaned_lines)
sf::st_covered_by(merged_lines, cleaned_lines)
sf::st_covered_by(cleaned_lines, merged_lines)
lengths(sf::st_covered_by(cleaned_lines, merged_lines))
lengths(sf::st_covered_by(cleaned_lines, merged_lines)) !=0
cleaned_lines[lengths(sf::st_covered_by(cleaned_lines, merged_lines)) !=0]
cleaned_lines[lengths(sf::st_covered_by(cleaned_lines, merged_lines)) !=0,]
load_all()
debit_lines = midlines_debit(cleaned_lines, set_units(20,"m"))
plot(debit_lines$geometry, col = debit_lines$line_id)
load_all()
smooth(debit_lines)
hh = smooth(debit_lines)
plot(hh$geometry)
load_all()
hh = smooth(debit_lines)
load_all()
hh = smooth(debit_lines)
hh = smooth(debit_lines)
dat = debit_lines
dat = group_lines(dat)
load_all()
hh = smooth(debit_lines)
dat = debit_lines
dat = group_lines(dat)
dat = st_cast(merged_lines,"LINESTRING")
s = function(x){
l = length(dat$geometry[[x]])
a = zoo::rollapply(dat$geometry[[x]][1:(l/2)], width = width, mean )
b = zoo::rollapply(dat$geometry[[x]][(l/2+1):l], width = width, mean )
sx = dat$geometry[[x]][1]
ex = dat$geometry[[x]][(l/2)]
sy = dat$geometry[[x]][(l/2+1)]
ey = dat$geometry[[x]][l]
sf::st_linestring(cbind(c(sx,a,ex),c(sy,b,ey)))
}
nrow = nrow(dat)
smoothed = sf::st_as_sf(sf::st_as_sfc(lapply(1:nrow, s, dat = dat)))
smoothed = sf::st_as_sf(sf::st_as_sfc(lapply(1:nrow, s)))
width = 3
smoothed = sf::st_as_sf(sf::st_as_sfc(lapply(1:nrow, s)))
colnames(smoothed)[colnames(smoothed) == colnames(smoothed)] = "geometry" #this only works cos there is one column
sf::st_geometry(smoothed) <- "geometry"
smoothed$line_id = 1:nrow(smoothed)
sf::st_crs(smoothed) = sf::st_crs(dat)
View(smoothed)
smoothed = sf::st_as_sf(sf::st_as_sfc(lapply(1:nrow, s)))
View(smoothed)
simplified = st_as_sf(
st_collection_extract(
st_split(smoothed$x,
st_cast(smoothed, "MULTIPOINT")), type = "LINESTRING"))
use_package(lwgeom)
use_package("lwgeom")
simplified = sf:st_as_sf(
sf:st_collection_extract(
lwgeom:st_split(smoothed$x,
sf:st_cast(smoothed, "MULTIPOINT")), type = "LINESTRING"))
simplified = sf::st_as_sf(
sf::st_collection_extract(
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "MULTIPOINT")), type = "LINESTRING"))
smoothed = sf::st_as_sf(sf::st_as_sfc(lapply(1:nrow, s)))
simplified = sf::st_as_sf(
sf::st_collection_extract(
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "MULTIPOINT")), type = "LINESTRING"))
sf::st_cast(smoothed, "MULTIPOINT")
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "MULTIPOINT")), type = "LINESTRING")
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "MULTIPOINT"))
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "POINT"))
sf::st_cast(smoothed, "POINT")
lwgeom::st_split(smoothed,
sf::st_cast(smoothed, "POINT"))
lwgeom::st_split(smoothed,
sf::st_cast(smoothed, "POINT"))
View(simplified)
simplified
View(simplified)
lwgeom::st_split(smoothed,
sf::st_cast(smoothed, "MULTIPOINT"))
plot(smoothed)
g = sf::st_cast(smoothed, "MULTIPOINT")
sf::st_crs(smoothed) = sf::st_crs(dat)
simplified = sf::st_as_sf(
sf::st_collection_extract(
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "MULTIPOINT")), type = "LINESTRING"))
smoothed
View(smoothed)
plot(g, add = TRUE )
sf::st_cast(smoothed, "MULTIPOINT")
lwgeom::st_split(smoothed,
sf::st_cast(smoothed, "MULTIPOINT"))
sf::st_collection_extract(
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "MULTIPOINT")), type = "LINESTRING"))
sf::st_collection_extract(
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "MULTIPOINT")), type = "LINESTRING")
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "MULTIPOINT"))
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed$x, "MULTIPOINT"))
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed$x, "POINT"))
plot(smoothed$x)
plot(g, add - TRUE)
plot(g, add = TRUE)
st_split(smoothed, g)
load_all()
st_split(smoothed, g)
library(lwgeom)
st_split(smoothed, g)
simplified = sf::st_as_sf(
sf::st_collection_extract(
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "MULTIPOINT")), type = "LINESTRING"))
st_split(smoothed, g)
g = sf::st_cast(smoothed, "POINT")
st_split(smoothed, g)
sf::st_collection_extract(st_split(smoothed, g), type = "LINESTRING"
sf::st_collection_extract(st_split(smoothed, g), type = "LINESTRING")
g = sf::st_cast(smoothed, "POINT")
sf::st_collection_extract(st_split(smoothed, st_union(g)), type = "LINESTRING")
simplified = sf::st_as_sf(
sf::st_collection_extract(
lwgeom::st_split(smoothed$x,
sf::st_cast(smoothed, "MULTIPOINT")), type = "LINESTRING"))
simplified = sf::st_as_sf(
sf::st_collection_extract(
lwgeom::st_split(smoothed$x,
sf::st_union(
sf::st_cast(smoothed, "MULTIPOINT"))), type = "LINESTRING"))
colnames(simplified)[colnames(simplified) == "x"] = "geometry"
st_geometry(simplified) <- "geometry"
simplified$line_id = 1:nrow(simplified)
smoothed = sf::st_as_sf(sf::st_as_sfc(lapply(1:nrow, s)))
smoothed = sf::st_as_sf(
sf::st_collection_extract(
lwgeom::st_split(smoothed$x,
sf::st_union(
sf::st_cast(smoothed, "MULTIPOINT"))), type = "LINESTRING"))
colnames(smoothed)[colnames(smoothed) == "x"] = "geometry"
st_geometry(smoothed) <- "geometry"
smoothed$line_id = 1:nrow(smoothed)
smoothed
sf::st_crs(smoothed) = sf::st_crs(dat)
load_all
load_all()
library(devtools)
library(sf)
library(dplyr)
library(units)
library(nngeo)
load_all()
la_nantes = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/la_nantes.gpkg")
osm_cycle_infra = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/osm_cycle_infra.gpkg")
#osm_nantes_metro_poly = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/osm_nantes_metro_poly.gpkg")
#annoyingly st_read names the geometry column and geom and the code won't like that
colnames(la_nantes)[colnames(la_nantes) == "geom"] = "geometry"
st_geometry(la_nantes) <- "geometry"
colnames(osm_cycle_infra)[colnames(osm_cycle_infra) == "geom"] = "geometry"
st_geometry(osm_cycle_infra) <- "geometry"
colnames(osm_nantes_metro_poly)[colnames(osm_nantes_metro_poly) == "geom"] = "geometry"
st_geometry(osm_nantes_metro_poly) <- "geometry"
#Boulevard Charles De Gaulle
bbox = sf::st_bbox(la_nantes %>% filter(commune=="ST-HERBLAIN"))
#bbox = sf::st_bbox(la_nantes %>% filter(commune=="ST-HERBLAIN" & nom=="Boulevard Charles De Gaulle")) # this is likely to be needed for the OSMextracts stuff to crop the dataset.
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Rue Camille Claudel"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard Jules Verne"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard des Anglais"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard Charles De Gaulle"))
bbox_as_line = st_cast(st_as_sfc(bbox),"LINESTRING")
bbox_as_poly = st_sfc(st_polygon(bbox_as_line),crs = st_crs(bbox_as_line))
# maybe something like this to more adequate assess the whole area.
# a = st_make_grid(bbox, n = c(5,5))
# st_bbox(a[[1]])
#cycle lane data for the bbox area
la_dat = la_nantes %>% st_intersection(st_as_sfc(bbox))
osm_dat = osm_cycle_infra %>% st_intersection(st_as_sfc(bbox))
plot(la_dat$geometry)
buffer_width = 7.5                # units don't work with square end style not sure why. it was okay for round ends?
max_distance_between_pts = 10     # ensure sufficient points on buffer to allow Voronoi
near_lanes_distance = set_units(7.5, metres)
near_buffer_distance = set_units(5, metres)  # to exclude, higher
#merge cycle lane data
dat_both = rbind(osm_dat[,"geometry"],la_dat[,"geometry"])
buffer_pol_union = st_union(st_buffer(dat_both, buffer_width, endCapStyle = "SQUARE", joinStyle = "BEVEL" )) # buffer width defined above (with units)
plot(dat_both$geometry)
plot(buffer_pol_union, add = TRUE)
plot(buffer_pol_union)
buffer_pol_union = st_remove_holes(buffer_pol_union, max_area = 250)
plot(buffer_pol_union)
midlines_all = midlines_draw(buffer_pol_union, max_dist = max_distance_between_pts, near_buffer_dist = near_buffer_distance)
# As i've cropped using the bbox but the voronoi don't stay within
midlines_all = st_intersection(midlines_all, bbox_as_poly)
plot(buffer_pol_union)
plot(midlines_all$geometry, add = TRUE, col = midlines_all$line_id)
live_deadends = deadends(midlines_all, n_removed = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
#deadend_lines2 = live_deadends2[live_deadends2$removed_flag==1,]
#liveend_lines2 = live_deadends2[live_deadends2$removed_flag==0,]
#plot(liveend_lines$geometry)
#plot(deadend_lines$geometry, col = "red", add = TRUE)
plot(live_deadends$geometry[live_deadends$removed_flag==0])
plot(live_deadends$geometry[live_deadends$removed_flag==1], col = "red", add = TRUE)
processed_lines = process_lines(live_deadends, length = set_units(30,"m"), n_lines = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
#cleaned_lines = processed_lines$cleaned_lines
#removed_multilines = processed_lines$removed_multilines
#cleaned_lines = processed_lines[processed_lines$removed_flag2==0,]
#removed_multilines = processed_lines[processed_lines$removed_flag2==1,] # these are not multilines now
plot(processed_lines$geometry)
plot(processed_lines$geometry[processed_lines$removed_flag==1], add = TRUE, col="red", lwd=3)
plot(processed_lines$geometry)
plot(processed_lines$geometry[processed_lines$removed_flag==1], add = TRUE, col="red", lwd=3)
plot(processed_lines$geometry[processed_lines$added_flag==1], add = TRUE, col="green", lwd=3)
cleaned_lines = processed_lines %>%
filter(removed_flag2 == 0) %>%
select(line_id, geometry)
#group the lines so that small bits especially on the margins can be excluded.
debit_lines = midlines_debit(cleaned_lines, set_units(20,"m"))
plot(debit_lines$geometry, col = debit_lines$line_id)
## pick up here. need to include grouping into the smooth (and de-densify)
hh = smooth(debit_lines)
load_all()
hh = smooth(debit_lines)
dat = debit_lines
dat = group_lines(dat)
View(dat)
dat = dat %>% select(geometry)
dat = st_cast(dat,"LINESTRING")
smoothed_lines = smooth(debit_lines)
load_all()
smoothed_lines = smooth(debit_lines)
plot(debit_lines$geometry)
plot(smoothed$geometry)
plot(smoothed_lines$geometry)
plot(debit_lines$geometry)
plot(smoothed_lines$geometry)
plot(linestrings$geometry[4])
plot(debit_lines$geometry[4])
plot(smoothed$geometry[4])
plot(smoothed_lines$geometry[4])
plot(debit_lines$geometry[4])
de_densified = de_densify(smoothed, density = set_units(20, "m"))
de_densified = de_densify(smoothed_lines, density = set_units(20, "m"))
(m = matrix(c(lengths(de_densified$geometry),lengths(smoothed$geometry)), nrow = nrow(de_densified) ))
colSums(m)
(m = matrix(c(lengths(de_densified$geometry),lengths(smoothed_lines$geometry)), nrow = nrow(de_densified) ))
load_all()
de_densified = de_densify(smoothed_lines, density = set_units(20, "m"))
(m = matrix(c(lengths(de_densified$geometry),lengths(smoothed_lines$geometry)), nrow = nrow(de_densified) ))
colSums(m)
x = smoothed_lines
density = units::set_units(20,"m")
x = group_lines(x)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
x = group_lines(x)
x = x %>% select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo))), crs = sf::st_crs(x)),"LINESTRING")
colnames(de_densified)[colnames(de_densified) == colnames(de_densified)] = "geometry" #this only works cos there is one column
sf::st_geometry(de_densified) <- "geometry"
de_densified$line_id = 1:nrow(de_densified)
(m = matrix(c(lengths(de_densified$geometry),lengths(ls$geometry)), nrow = nrow(de_densified) ))
colSums(m)
View(de_densified)
de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo))), crs = sf::st_crs(x)),"LINESTRING")
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo))), crs = sf::st_crs(x)),"LINESTRING")
View(de_densified)
colnames(de_densified)[colnames(de_densified) == colnames(de_densified)] = "geometry" #this only works cos there is one column
sf::st_geometry(de_densified) <- "geometry"
de_densified$line_id = 1:nrow(de_densified)
(m = matrix(c(lengths(de_densified$geometry),lengths(ls$geometry)), nrow = nrow(de_densified) ))
colSums(m)
de_densified = sf::st_as_sf(
sf::st_collection_extract(
lwgeom::st_split(de_densified$geometry,
sf::st_union(
sf::st_cast(de_densified, "MULTIPOINT"))), type = "LINESTRING"))
View(de_densified)
de_densified
load_all()
de_densified = de_densify(smoothed_lines, density = set_units(20, "m"))
x = group_lines(x)
x = x %>% select(geometry)
ls = sf::st_cast(x,"LINESTRING")
ls$line_id = 1:nrow(ls)
de_densified = sf::st_as_sf(sf::st_line_sample(ls, density = density))
de_densified$s = lwgeom::st_startpoint(ls)
de_densified$e = lwgeom::st_endpoint(ls)
combo = function(x){(sf::st_union(c(x$s,x$x,x$e)))}
de_densified = sf::st_cast(sf::st_sf(sf::st_as_sfc((apply(de_densified,1,combo))), crs = sf::st_crs(x)),"LINESTRING")
colnames(de_densified)[colnames(de_densified) == colnames(de_densified)] = "geometry" #this only works cos there is one column
sf::st_geometry(de_densified) <- "geometry"
de_densified$line_id = 1:nrow(de_densified)
(m = matrix(c(lengths(de_densified$geometry),lengths(ls$geometry)), nrow = nrow(de_densified) ))
colSums(m)
de_densified = sf::st_as_sf(
sf::st_collection_extract(
lwgeom::st_split(de_densified$geometry,
sf::st_union(
sf::st_cast(de_densified, "MULTIPOINT"))), type = "LINESTRING"))
colnames(de_densified)[colnames(de_densified) == colnames(de_densified)] = "geometry" #this only works cos there is one column
sf::st_geometry(de_densified) <- "geometry"
de_densified$line_id = 1:nrow(de_densified)
View(de_densified)
de_densified
load_all
load_all()
de_densified = de_densify(smoothed_lines, density = set_units(20, "m"))
View(de_densified)
plot(de_densified$geometry, col = de_densified$line_id)
plot(de_densified$geometry, col = de_densified$line_id)
library(devtools)
library(sf)
library(dplyr)
library(units)
library(nngeo)
load_all()
la_nantes = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/la_nantes.gpkg")
osm_cycle_infra = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/osm_cycle_infra.gpkg")
#osm_nantes_metro_poly = st_read("C:/Users/richa/OneDrive - University of Cambridge/fr_cyclables/data/clean/osm_nantes_metro_poly.gpkg")
#annoyingly st_read names the geometry column and geom and the code won't like that
colnames(la_nantes)[colnames(la_nantes) == "geom"] = "geometry"
st_geometry(la_nantes) <- "geometry"
colnames(osm_cycle_infra)[colnames(osm_cycle_infra) == "geom"] = "geometry"
st_geometry(osm_cycle_infra) <- "geometry"
#colnames(osm_nantes_metro_poly)[colnames(osm_nantes_metro_poly) == "geom"] = "geometry"
#st_geometry(osm_nantes_metro_poly) <- "geometry"
#Boulevard Charles De Gaulle
bbox = sf::st_bbox(la_nantes %>% filter(commune=="ST-HERBLAIN"))
#bbox = sf::st_bbox(la_nantes %>% filter(commune=="ST-HERBLAIN" & nom=="Boulevard Charles De Gaulle")) # this is likely to be needed for the OSMextracts stuff to crop the dataset.
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Rue Camille Claudel"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard Jules Verne"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard des Anglais"))
bbox = sf::st_bbox(la_nantes %>% filter(nom=="Boulevard Charles De Gaulle"))
bbox_as_line = st_cast(st_as_sfc(bbox),"LINESTRING")
bbox_as_poly = st_sfc(st_polygon(bbox_as_line),crs = st_crs(bbox_as_line))
# maybe something like this to more adequate assess the whole area.
# a = st_make_grid(bbox, n = c(5,5))
# st_bbox(a[[1]])
#cycle lane data for the bbox area
la_dat = la_nantes %>% st_intersection(st_as_sfc(bbox))
osm_dat = osm_cycle_infra %>% st_intersection(st_as_sfc(bbox))
plot(la_dat$geometry)
buffer_width = 7.5                # units don't work with square end style not sure why. it was okay for round ends?
max_distance_between_pts = 10     # ensure sufficient points on buffer to allow Voronoi
near_lanes_distance = set_units(7.5, metres)
near_buffer_distance = set_units(5, metres)  # to exclude, higher
#merge cycle lane data
dat_both = rbind(osm_dat[,"geometry"],la_dat[,"geometry"])
buffer_pol_union = st_union(st_buffer(dat_both, buffer_width, endCapStyle = "SQUARE", joinStyle = "BEVEL" )) # buffer width defined above (with units)
plot(dat_both$geometry)
plot(buffer_pol_union, add = TRUE)
plot(buffer_pol_union)
buffer_pol_union = st_remove_holes(buffer_pol_union, max_area = 250)
plot(buffer_pol_union)
midlines_all = midlines_draw(buffer_pol_union, max_dist = max_distance_between_pts, near_buffer_dist = near_buffer_distance)
# As i've cropped using the bbox but the voronoi don't stay within
midlines_all = st_intersection(midlines_all, bbox_as_poly)
plot(buffer_pol_union)
plot(midlines_all$geometry, add = TRUE, col = midlines_all$line_id)
live_deadends = deadends(midlines_all, n_removed = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
#deadend_lines2 = live_deadends2[live_deadends2$removed_flag==1,]
#liveend_lines2 = live_deadends2[live_deadends2$removed_flag==0,]
#plot(liveend_lines$geometry)
#plot(deadend_lines$geometry, col = "red", add = TRUE)
plot(live_deadends$geometry[live_deadends$removed_flag==0])
plot(live_deadends$geometry[live_deadends$removed_flag==1], col = "red", add = TRUE)
processed_lines = process_lines(live_deadends, length = set_units(30,"m"), n_lines = 10, boarder_line = bbox_as_line, boarder_distance = set_units(1,"m"))
#cleaned_lines = processed_lines$cleaned_lines
#removed_multilines = processed_lines$removed_multilines
#cleaned_lines = processed_lines[processed_lines$removed_flag2==0,]
#removed_multilines = processed_lines[processed_lines$removed_flag2==1,] # these are not multilines now
plot(processed_lines$geometry)
plot(processed_lines$geometry[processed_lines$removed_flag==1], add = TRUE, col="red", lwd=3)
plot(processed_lines$geometry)
plot(processed_lines$geometry[processed_lines$removed_flag==1], add = TRUE, col="red", lwd=3)
plot(processed_lines$geometry[processed_lines$added_flag==1], add = TRUE, col="green", lwd=3)
cleaned_lines = processed_lines %>%
filter(removed_flag2 == 0) %>%
select(line_id, geometry)
#group the lines so that small bits especially on the margins can be excluded.
debit_lines = midlines_debit(cleaned_lines, set_units(20,"m"))
plot(debit_lines$geometry, col = debit_lines$line_id)
## pick up here. need to include grouping into the smooth (and de-densify)
smoothed_lines = smooth(debit_lines)
plot(debit_lines$geometry)
plot(smoothed_lines$geometry)
#plot(de_densified$geometry)
plot(debit_lines$geometry[4])
plot(smoothed_lines$geometry[4])
#plot(de_densified$geometry[4])
###########
de_densified = de_densify(smoothed_lines, density = set_units(20, "m"))
plot(de_densified$geometry, col = de_densified$line_id)
st_point(5,5)
st_point(c(5,5))
st_buffer(st_point(c(5,5)), 2)
st_polygon(
(st_buffer(st_point(c(5,5)), 2))
(st_buffer(st_point(c(5,5)), 2)) )
st_polygon(
(st_buffer(st_point(c(5,5)), 2)),
(st_buffer(st_point(c(5,5)), 3)) )
g = st_polygon(
(st_buffer(st_point(c(5,5)), 2)),
(st_buffer(st_point(c(5,5)), 3)) )
plot(g, col = "red")
g = st_polygon(
st_difference(
(st_buffer(st_point(c(5,5)), 3)),
(st_buffer(st_point(c(5,5)), 2)) ) )
plot(g, col = "red")
midlines_draw(g)
j = st_covered_by(g, )
plot(j$geometry, add = TRUE)
plot(j, add = TRUE)
j = midlines_draw(g)
plot(g, col = "red")
plot(j, add = TRUE)
deadends(j)
k = deadends(j)
plot(k$geometry, col = k$removed_flag, add = TRUE)
l = processed_lines(k)
l = process_lines(k)
l = process_lines(k, n_lines = 5)
l = process_lines(k, n_lines = 5, length = 10)
plot(l$geometry, col = l$removed_flag2)
plot(l$geometry, col = l$removed_flag2, add = TRUE)
plot(k$geometry, col = k$removed_flag, add = TRUE)
plot(g, col = "red")
plot(j, add = TRUE)
plot(k$geometry, col = k$removed_flag, add = TRUE)
plot(l$geometry, col = l$removed_flag2, add = TRUE)
m = smooth(l)
plot(m$geometry)
plot(m$geometry, add = TRUE)
View(smoothed_lines)
l = 1[l$removed_flag2==0]
l = l[l$removed_flag2==0]
l = process_lines(k, n_lines = 5, length = 10)
plot(l$geometry, col = l$removed_flag2, add = TRUE)
l = l[l$removed_flag2==0]
View(l)
l = l[l$removed_flag2==0,]
m = smooth(l)
plot(m$geometry, add = TRUE)
plot(l$geometry, col = l$removed_flag2, add = TRUE)
plot(g, col = "red")
j = midlines_draw(g)
plot(j, add = TRUE)
k = deadends(j)
plot(k$geometry, col = k$removed_flag, add = TRUE)
l = process_lines(k, n_lines = 5, length = 10)
plot(l$geometry, col = l$removed_flag2, add = TRUE)
l = l[l$removed_flag2==0,]
m = smooth(l)
plot(m$geometry, add = TRUE)
outer = matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE)
hole1 = matrix(c(1,1,1,2,2,2,2,1,1,1),ncol=2, byrow=TRUE)
hole2 = matrix(c(5,5,5,6,6,6,6,5,5,5),ncol=2, byrow=TRUE)
pts = list(outer, hole1, hole2)
plot(outer)
(pl1 = st_polygon(pts))
plot(pl1)
plot(pl1, col = "red")
outer = matrix(c(0,0,10,0,10,10,0,10,0,0),ncol=2, byrow=TRUE)
hole1 = matrix(c(2,2,2,8,8,8,8,2,2,2),ncol=2, byrow=TRUE)
#hole2 = matrix(c(5,5,5,6,6,6,6,5,5,5),ncol=2, byrow=TRUE)
pts = list(outer, hole1)
(pl1 = st_polygon(pts))
plot(pl1, col = "red")
g=pl1
j = midlines_draw(g)
plot(j, add = TRUE)
k = deadends(j)
plot(k$geometry, col = k$removed_flag, add = TRUE)
l = process_lines(k, n_lines = 5, length = 10)
plot(l$geometry, col = l$removed_flag2, add = TRUE)
l = l[l$removed_flag2==0,]
m = smooth(l)
plot(m$geometry, add = TRUE)
